{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Digit\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Digit\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Digit\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Digit\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Digit\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Digit\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Digit\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Digit\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Digit\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport './App.css';\nimport Main from './Main';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport ParticleSettings from './ParticleSettings';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, networkId, tetherData, tether, tetherBalance, rwdTokenData, rwd, rwdTokenBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context2.sent;\n                //LOAD Tether TOKEN\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context2.next = 15;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 15:\n                tetherBalance = _context2.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                _context2.next = 20;\n                break;\n\n              case 19:\n                window.alert(\"tether contract not deployed to detect network\");\n\n              case 20:\n                //LOAD RWD TOKEN\n                rwdTokenData = RWD.networks[networkId];\n\n                if (!rwdTokenData) {\n                  _context2.next = 30;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdTokenData.address);\n                this.setState({\n                  RWD: RWD\n                });\n                _context2.next = 26;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 26:\n                rwdTokenBalance = _context2.sent;\n                this.setState({\n                  rwdTokenBalance: rwdTokenBalance.toString()\n                });\n                _context2.next = 31;\n                break;\n\n              case 30:\n                window.alert(\"Reward Token contract not deployed to detect network\");\n\n              case 31:\n                //Load DecentralBank\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context2.next = 41;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context2.next = 37;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 37:\n                stakingBalance = _context2.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                _context2.next = 42;\n                break;\n\n              case 41:\n                window.alert(\"TokenForm contract not deployed to detect network\");\n\n              case 42:\n                this.setState({\n                  loading: false\n                });\n\n              case 43:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non ethereum browser detected. You should consider Metamask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.stakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.tether.methods.approve(_this.state.decentralBank._address, amount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.state.decentralBank.methods.depositTokens(amount).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.unstakeTokens = function () {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.decentralBank.methods.unstakeTokens().send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdTokenBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _React$createElement;\n\n      var content;\n      {\n        this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          style: {\n            color: 'white',\n            margin: '30px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 33\n          }\n        }, \"LOADING PLEASE...\") : content = /*#__PURE__*/React.createElement(Main, {\n          tetherBalance: this.state.tetherBalance,\n          rwdBalance: this.state.rwdTokenBalance,\n          stakingBalance: this.state.stakingBalance,\n          stakeTokens: this.stakeTokens,\n          unstakeTokens: this.unstakeTokens,\n          decentralBankContract: this.decentralBank,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 1\n          }\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        style: {\n          position: 'relative'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ParticleSettings, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", (_React$createElement = {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px'\n        }\n      }, _defineProperty(_React$createElement, \"style\", {\n        minHeight: '100vm'\n      }), _defineProperty(_React$createElement, \"__self\", this), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }), _React$createElement), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }\n      }, content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Digit/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Main","Tether","RWD","DecentralBank","ParticleSettings","App","loadWeb3","loadBlockchainData","web3","window","eth","getAccounts","accounts","console","log","setState","account","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","alert","rwdTokenData","rwd","rwdTokenBalance","decentralBankData","decentralBank","stakingBalance","loading","ethereum","enable","currentProvider","props","stakeTokens","amount","approve","_address","send","from","on","hash","depositTokens","unstakeTokens","content","color","margin","position","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Navbar from './Navbar'\r\nimport Web3 from 'web3'\r\nimport './App.css'\r\nimport Main from './Main'\r\nimport Tether from '../truffle_abis/Tether.json'\r\nimport RWD from '../truffle_abis/RWD.json'\r\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\r\nimport ParticleSettings from './ParticleSettings'\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    const accounts = await web3.eth.getAccounts()\r\n    console.log(accounts)\r\n    this.setState({account: accounts[0]})\r\n    const networkId = await web3.eth.net.getId()\r\n\r\n    //LOAD Tether TOKEN\r\n    const tetherData = Tether.networks[networkId]\r\n    if(tetherData) {\r\n      const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\r\n      this.setState({tether})\r\n      let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\r\n      this.setState({ tetherBalance: tetherBalance.toString()})\r\n    } else {\r\n      window.alert(\"tether contract not deployed to detect network\")\r\n    }\r\n\r\n      //LOAD RWD TOKEN\r\n      const rwdTokenData = RWD.networks[networkId]\r\n      if(rwdTokenData) {\r\n        const rwd = new web3.eth.Contract(RWD.abi, rwdTokenData.address)\r\n        this.setState({RWD})\r\n        let rwdTokenBalance = await rwd.methods.balanceOf(this.state.account).call()\r\n        this.setState({ rwdTokenBalance: rwdTokenBalance.toString()})\r\n      } else {\r\n        window.alert(\"Reward Token contract not deployed to detect network\")\r\n      }\r\n\r\n          //Load DecentralBank\r\n          const decentralBankData = DecentralBank.networks[networkId]\r\n          if(decentralBankData) {\r\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\r\n            this.setState({decentralBank})\r\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\r\n            this.setState({ stakingBalance: stakingBalance.toString()})\r\n          } else {\r\n            window.alert(\"TokenForm contract not deployed to detect network\")\r\n          }\r\n\r\n          this.setState({loading: false})\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if(window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non ethereum browser detected. You should consider Metamask!')\r\n    }\r\n  }\r\n\r\n  stakeTokens = (amount) => {\r\n    this.setState({loading: true })\r\n    this.state.tether.methods.approve(this.state.decentralBank._address, amount).send({from: this.state.account}).on('transactionHash', (hash) => {\r\n      this.state.decentralBank.methods.depositTokens(amount).send({from: this.state.account}).on('transactionHash', (hash) => {\r\n        this.setState({loading:false})\r\n      })\r\n    })\r\n  }\r\n\r\n  unstakeTokens = () => {\r\n    this.setState({loading: true })\r\n    this.state.decentralBank.methods.unstakeTokens().send({from: this.state.account}).on('transactionHash', (hash) => {\r\n      this.setState({loading:false})\r\n    })\r\n  }\r\n\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '0x0',\r\n      tether: {},\r\n      rwd: {},\r\n      decentralBank: {},\r\n      tetherBalance: '0',\r\n      rwdTokenBalance: '0',\r\n      stakingBalance: '0',\r\n      loading: true\r\n    }\r\n  }\r\n\r\n  render() {\r\nlet content\r\n\r\n{this.state.loading ? content = <p id=\"loader\" className='text-center' style={{color:'white', margin:'30px'}}>LOADING PLEASE...</p> : content =\r\n\r\n\r\n<Main\r\ntetherBalance={this.state.tetherBalance}\r\nrwdBalance={this.state.rwdTokenBalance}\r\nstakingBalance={this.state.stakingBalance}\r\nstakeTokens={this.stakeTokens}\r\nunstakeTokens={this.unstakeTokens}\r\ndecentralBankContract={this.decentralBank}\r\n/>}\r\n\r\n    return (\r\n\r\n      <div  className=\"App\" style={{ position: 'relative'}}>\r\n        <div style={{ position: 'absolute'}}>\r\n        <ParticleSettings />\r\n                </div>\r\n        <Navbar account={this.state.account} />\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '600px'}} style={{ minHeight: '100vm'}}>\r\n              <div>\r\n                {content}\r\n              </div>\r\n            </main>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}